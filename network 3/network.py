import numpy as np

class NeuralNetwork():

    #Init function
    def __init__(self):
        np.random.seed(1)
        self.synaptic_weights = 2 * np.random.random((3,1)) - 1

    #Sigmoid function
    def sigmoid(self,x):
        return 1 / (1+np.exp(-x))

    #Sigmoid derivative function
    def sigmoid_derivative(self,x):
        return x * (1 - x)

    def train(self,training_inputs, training_outputs, training_iterations):

        #For loop which will train the neurons getting the weights where they need to be
        for iteration in range(training_iterations):

            output = self.think(training_inputs)
            error = training_outputs - output
            #Makes adjustments to the weight based on the product of the error value and the value of plotting the outputs in a sigmoid derivative function; then takes that and applies a dot product to it with the training_inputs
            adjustments = np.dot(training_inputs.T, error * self.sigmoid_derivative(output))
            self.synaptic_weights += adjustments

    #Think function; used to discern which output to generate
    def think(self,inputs):

        inputs = inputs.astype(float)
        #Plots the dot product of the inputs and the synaptic weights, and then plots the result on the sigmoid function to get an output.
        output = self.sigmoid(np.dot(inputs, self.synaptic_weights)
        return output

if __name__ == "__main__":

    #network = NeuralNetwork()

    #The inputs and outputs that are used to train the neuron
    training_inputs = np.array([ [1,1,1],[0,0,1],[0,1,1],[1,0,1] ])
    training_outputs = np.array([[0,1,1,0]]).T

    network = NeuralNetwork()

    #Prints the random synaptic weights generated by the __init__ function
    print("Random synaptic weights: ")
    print(network.synaptic_weights)

    #Gets the desired training iterations from the user and uses it to train the neuron
    iterations = int(input("Training Iterations: "))
    network.train(training_inputs,training_outputs,iterations)

    print("Synaptic weights after training: ")
    print(network.synaptic_weights)

    #Get three inputs from user and put them into an array
    A = str(input("Input 1: "))
    B = str(input("Input 2: "))
    C = str(input("Input 3: "))

    #Display the input and output data for this session
    print("New situation: input data = ", A,B,C)
    print("Output data: ")
    print(network.think(np.array([A,B,C])))
